#!/usr/bin/env python3
"""
Simulador de eventos para probar el sistema
Env√≠a detecciones de puertas abiertas al backend
"""

import requests
import time
import json
import base64
from datetime import datetime
import numpy as np
from PIL import Image
import io

def create_test_image(width=640, height=480, door_open=True):
    """Crear imagen de prueba con puerta"""
    # Crear imagen base
    img = Image.new('RGB', (width, height), color='gray')
    
    # Dibujar una puerta (rect√°ngulo)
    from PIL import ImageDraw
    draw = ImageDraw.Draw(img)
    
    # Posici√≥n de la puerta
    door_x = width // 2 - 50
    door_y = height // 2 - 100
    door_width = 100
    door_height = 200
    
    # Color seg√∫n estado
    door_color = 'red' if door_open else 'green'
    
    # Dibujar puerta
    draw.rectangle(
        [door_x, door_y, door_x + door_width, door_y + door_height],
        outline=door_color,
        width=3,
        fill=door_color if door_open else None
    )
    
    # Agregar texto
    draw.text((10, 10), f"TEST: Puerta {'ABIERTA' if door_open else 'CERRADA'}", fill='white')
    draw.text((10, 30), f"Hora: {datetime.now().strftime('%H:%M:%S')}", fill='white')
    
    return img

def simulate_detection(door_id="door_1", door_open=True):
    """Simular una detecci√≥n envi√°ndola al backend"""
    print(f"\nüö™ Simulando detecci√≥n: Puerta {door_id} {'ABIERTA' if door_open else 'CERRADA'}")
    
    # Crear imagen de prueba
    img = create_test_image(door_open=door_open)
    
    # Convertir a bytes
    img_buffer = io.BytesIO()
    img.save(img_buffer, format='JPEG')
    img_bytes = img_buffer.getvalue()
    
    # Enviar al backend
    files = {'file': ('test.jpg', img_bytes, 'image/jpeg')}
    
    try:
        # 1. Enviar imagen para detecci√≥n
        response = requests.post(
            "http://localhost:8888/api/detect",
            files=files,
            params={'confidence': 0.65}
        )
        
        if response.status_code == 200:
            result = response.json()
            print(f"   ‚úÖ Detecci√≥n procesada")
            print(f"   üìä Detecciones: {len(result.get('detections', []))}")
            
            # Simular que la detecci√≥n viene de una c√°mara espec√≠fica
            if door_open and result.get('detections'):
                # Enviar evento de puerta abierta v√≠a WebSocket
                print(f"   üì° Simulando evento de {door_id}")
                
                # El backend deber√≠a procesar esto autom√°ticamente
                # pero para testing podemos verificar los timers
                time.sleep(1)
                
                # Verificar timers activos
                stats_response = requests.get("http://localhost:8888/api/statistics")
                if stats_response.status_code == 200:
                    stats = stats_response.json().get('statistics', {})
                    print(f"   ‚è±Ô∏è Timers activos: {stats.get('active_timers', 0)}")
        else:
            print(f"   ‚ùå Error: {response.status_code}")
            
    except Exception as e:
        print(f"   ‚ùå Error enviando detecci√≥n: {e}")

def run_simulation():
    """Ejecutar simulaci√≥n completa"""
    print("üé¨ INICIANDO SIMULACI√ìN DE EVENTOS")
    print("=" * 50)
    
    scenarios = [
        {"door_id": "door_1", "duration": 10, "desc": "Entrada principal - Apertura corta"},
        {"door_id": "loading", "duration": 35, "desc": "Zona de carga - Apertura normal"},
        {"door_id": "emergency", "duration": 65, "desc": "Salida emergencia - Apertura larga"},
    ]
    
    for i, scenario in enumerate(scenarios):
        print(f"\nüìç Escenario {i+1}: {scenario['desc']}")
        print(f"   Duraci√≥n planificada: {scenario['duration']}s")
        
        # 1. Abrir puerta
        simulate_detection(scenario['door_id'], door_open=True)
        
        # 2. Esperar
        print(f"   ‚è≥ Esperando {scenario['duration']}s...")
        for j in range(scenario['duration']):
            if j % 10 == 0:
                print(f"      {j}s transcurridos...")
            time.sleep(1)
        
        # 3. Cerrar puerta
        simulate_detection(scenario['door_id'], door_open=False)
        
        # 4. Pausa entre escenarios
        if i < len(scenarios) - 1:
            print("\n   üí§ Pausa de 5s antes del siguiente escenario...")
            time.sleep(5)
    
    print("\n" + "=" * 50)
    print("‚úÖ SIMULACI√ìN COMPLETADA")
    print("\nüí° Revisa el dashboard en http://localhost:3000")
    print("   - Tab Monitor: Ver temporizadores y alertas")
    print("   - Tab Dashboard: Ver estad√≠sticas")
    print("   - Bot√≥n 'Ver Video Contextual' en cada timer")

if __name__ == "__main__":
    # Verificar que el backend est√© corriendo
    try:
        response = requests.get("http://localhost:8888/api/health", timeout=2)
        if response.status_code == 200:
            print("‚úÖ Backend detectado, iniciando simulaci√≥n...\n")
            run_simulation()
        else:
            print("‚ùå Backend no responde correctamente")
    except:
        print("‚ùå Backend no est√° corriendo")
        print("üí° Ejecuta primero: python3 backend/main.py")
