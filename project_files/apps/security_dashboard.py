#!/usr/bin/env python3
"""
Dashboard de Seguridad - Interfaz Web con Streamlit
Monitoreo en tiempo real del sistema de seguridad YOLO11
"""

import streamlit as st
import cv2
import numpy as np
import time
import json
import pandas as pd
from datetime import datetime, timedelta
import plotly.express as px
import plotly.graph_objects as go
from pathlib import Path
from ultralytics import YOLO
from PIL import Image

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Sistema de Seguridad YOLO11",
    page_icon="üõ°Ô∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personalizado
st.markdown("""
<style>
    .metric-card {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid #1f77b4;
    }
    .alert-card {
        background-color: #ffe6e6;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid #ff4444;
    }
    .success-card {
        background-color: #e6ffe6;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid #44ff44;
    }
</style>
""", unsafe_allow_html=True)

@st.cache_resource
def load_security_detector():
    """Cargar detector de seguridad (cached)"""
    try:
        from ultralytics import YOLO
        # Usar nuestro modelo entrenado de puertas
        model_path = Path(__file__).parent.parent.parent / 'runs' / 'gates' / 'gate_detector_v1' / 'weights' / 'best.pt'
        
        if not model_path.exists():
            st.error(f"Modelo no encontrado en: {model_path}")
            return None
            
        model = YOLO(str(model_path))
        return model
    except Exception as e:
        st.error(f"Error cargando detector: {e}")
        return None

def calculate_iou(box1, box2):
    """Calcular Intersection over Union entre dos cajas"""
    x1 = max(box1['x1'], box2['x1'])
    y1 = max(box1['y1'], box2['y1'])
    x2 = min(box1['x2'], box2['x2'])
    y2 = min(box1['y2'], box2['y2'])
    
    intersection = max(0, x2 - x1) * max(0, y2 - y1)
    area1 = (box1['x2'] - box1['x1']) * (box1['y2'] - box1['y1'])
    area2 = (box2['x2'] - box2['x1']) * (box2['y2'] - box2['y1'])
    union = area1 + area2 - intersection
    
    return intersection / union if union > 0 else 0

def count_unique_doors(detections, iou_threshold=0.5):
    """Contar puertas √∫nicas considerando superposiciones"""
    if not detections:
        return {
            'gate_open': 0,
            'gate_closed': 0,
            'total_detections': 0,
            'unique_detections': []
        }
    
    # Separar por clase
    open_doors = [d for d in detections if d['class_name'] == 'gate_open']
    closed_doors = [d for d in detections if d['class_name'] == 'gate_closed']
    
    # Para puertas abiertas, verificar superposiciones
    unique_open = []
    for door in open_doors:
        is_duplicate = False
        for unique in unique_open:
            if calculate_iou(door['bbox'], unique['bbox']) > iou_threshold:
                is_duplicate = True
                break
        if not is_duplicate:
            unique_open.append(door)
    
    # Para puertas cerradas, hacer lo mismo
    unique_closed = []
    for door in closed_doors:
        is_duplicate = False
        for unique in unique_closed:
            if calculate_iou(door['bbox'], unique['bbox']) > iou_threshold:
                is_duplicate = True
                break
        if not is_duplicate:
            unique_closed.append(door)
    
    return {
        'gate_open': len(unique_open),
        'gate_closed': len(unique_closed),
        'total_detections': len(detections),
        'unique_detections': unique_open + unique_closed
    }

def display_metrics(detections: list):
    """Mostrar m√©tricas principales para detecci√≥n de puertas"""
    col1, col2, col3, col4 = st.columns(4)
    
    # Contar puertas √∫nicas
    door_counts = count_unique_doors(detections)
    gate_open_count = door_counts['gate_open']
    gate_closed_count = door_counts['gate_closed']
    total_detections = door_counts['total_detections']
    
    # Calcular confianza promedio solo de detecciones √∫nicas
    unique_detections = door_counts['unique_detections']
    avg_confidence = np.mean([d['confidence'] for d in unique_detections]) if unique_detections else 0
    
    with col1:
        st.metric(
            label="üö™ Puertas Abiertas",
            value=gate_open_count,
            delta=None
        )
    
    with col2:
        st.metric(
            label="üîí Puertas Cerradas",
            value=gate_closed_count,
            delta=None
        )
    
    with col3:
        st.metric(
            label="üìä Total Detecciones",
            value=f"{len(unique_detections)}/{total_detections}",
            delta=None,
            help="√önicas/Totales"
        )
    
    with col4:
        st.metric(
            label="üéØ Confianza Promedio",
            value=f"{avg_confidence:.1%}",
            delta=None
        )

def display_alerts(detections: list):
    """Mostrar alertas del sistema basadas en detecciones de puertas"""
    door_counts = count_unique_doors(detections)
    gate_open_count = door_counts['gate_open']
    
    if gate_open_count > 0:
        st.subheader("üö® Alertas del Sistema")
        
        st.markdown(f"""
        <div class="alert-card">
            <strong>‚ö†Ô∏è PUERTA ABIERTA DETECTADA</strong><br>
            Cantidad: {gate_open_count} puerta(s) abierta(s)<br>
            Hora: {datetime.now().strftime('%H:%M:%S')}<br>
            Acci√≥n recomendada: Verificar estado de seguridad
        </div>
        """, unsafe_allow_html=True)
    else:
        st.markdown("""
        <div class="success-card">
            <strong>‚úÖ Sistema Normal</strong><br>
            Todas las puertas est√°n cerradas.
        </div>
        """, unsafe_allow_html=True)

def display_detections_table(detections: list):
    """Mostrar tabla de detecciones con indicador de confianza"""
    if not detections:
        st.info("No hay detecciones en el frame actual")
        return
    
    # Preparar datos para la tabla
    table_data = []
    for det in detections:
        # Determinar nivel de confianza
        conf = det['confidence']
        if conf >= 0.75:
            conf_emoji = "üü¢"
            conf_level = "Alta"
        elif conf >= 0.65:
            conf_emoji = "üü°"
            conf_level = "Media"
        elif conf >= 0.50:
            conf_emoji = "üî¥"
            conf_level = "Baja"
        else:
            conf_emoji = "‚ö´"
            conf_level = "Muy Baja"
            
        table_data.append({
            'Clase': det['class_name'].replace('_', ' ').title(),
            'Confianza': f"{conf:.2f}",
            'Nivel': f"{conf_emoji} {conf_level}",
            'Centro X': det['center']['x'],
            'Centro Y': det['center']['y'],
            '√Årea': (det['bbox']['x2'] - det['bbox']['x1']) * (det['bbox']['y2'] - det['bbox']['y1'])
        })
    
    df = pd.DataFrame(table_data)
    st.dataframe(df, use_container_width=True)
    
    # Advertencia para detecciones de baja confianza
    low_conf_count = sum(1 for det in detections if det['confidence'] < 0.65)
    if low_conf_count > 0:
        st.warning(f"""
        ‚ö†Ô∏è **Advertencia**: {low_conf_count} detecci√≥n(es) con baja confianza (<65%).
        Estas podr√≠an ser falsos positivos. Se recomienda verificaci√≥n visual.
        """)



def process_uploaded_image(model, uploaded_file, confidence_threshold=0.5):
    """Procesar imagen subida con el modelo de puertas"""
    # Leer imagen
    image = Image.open(uploaded_file)
    
    # Procesar con YOLO - Agregar IOU threshold para reducir duplicados
    results = model.predict(image, conf=confidence_threshold, iou=0.5, verbose=False)
    
    # Extraer detecciones
    detections = []
    if len(results) > 0 and results[0].boxes is not None:
        for box in results[0].boxes:
            detection = {
                'class_name': model.names[int(box.cls)],
                'confidence': float(box.conf),
                'bbox': {
                    'x1': int(box.xyxy[0][0]),
                    'y1': int(box.xyxy[0][1]),
                    'x2': int(box.xyxy[0][2]),
                    'y2': int(box.xyxy[0][3])
                },
                'center': {
                    'x': int((box.xyxy[0][0] + box.xyxy[0][2]) / 2),
                    'y': int((box.xyxy[0][1] + box.xyxy[0][3]) / 2)
                }
            }
            detections.append(detection)
    
    # Obtener imagen anotada
    annotated_frame = results[0].plot()
    
    return annotated_frame, detections

def main():
    """Funci√≥n principal del dashboard"""
    
    # Header
    st.title("üõ°Ô∏è Sistema de Seguridad YOLO11 - Detecci√≥n de Puertas")
    st.markdown("*Modelo entrenado con 99.39% de precisi√≥n (mAP@50)*")
    
    # Sidebar
    st.sidebar.header("‚öôÔ∏è Configuraci√≥n")
    
    # Modo de operaci√≥n
    mode = st.sidebar.selectbox(
        "Modo de Operaci√≥n",
        ["üì∏ An√°lisis de Imagen", "üìä Dashboard en Vivo", "üìà Estad√≠sticas"]
    )
    
    # Cargar modelo
    model = load_security_detector()
    
    if model is None:
        st.error("No se pudo cargar el modelo de detecci√≥n de puertas")
        st.stop()
    
    # Mostrar informaci√≥n del modelo
    st.sidebar.success("‚úÖ Modelo cargado correctamente")
    st.sidebar.info(f"Clases: {', '.join(model.names.values())}")
    
    # Agregar informaci√≥n sobre umbrales
    st.sidebar.markdown("---")
    st.sidebar.markdown("### üìä Niveles de Confianza")
    st.sidebar.markdown("""
    - **üü¢ > 75%**: Alta confianza
    - **üü° 65-75%**: Confianza media
    - **üî¥ 50-65%**: Baja confianza
    - **‚ö´ < 50%**: No detectado
    """)
    
    if mode == "üì∏ An√°lisis de Imagen":
        st.header("An√°lisis de Imagen")
        
        # Configuraci√≥n
        confidence_threshold = st.sidebar.slider(
            "Umbral de Confianza",
            min_value=0.1,
            max_value=1.0,
            value=0.65,  # Aumentado de 0.5 a 0.65
            step=0.05,
            help="Valores m√°s altos reducen falsos positivos pero pueden perder detecciones reales"
        )
        
        # Modo de an√°lisis
        analysis_mode = st.sidebar.radio(
            "Modo de An√°lisis",
            ["üéØ Balanceado", "üõ°Ô∏è Alta Seguridad", "üîç Alta Sensibilidad"],
            index=0,
            help="Balanceado: 65% | Alta Seguridad: 75% | Alta Sensibilidad: 50%"
        )
        
        # Ajustar umbral seg√∫n modo
        if analysis_mode == "üõ°Ô∏è Alta Seguridad":
            confidence_threshold = 0.75
        elif analysis_mode == "üîç Alta Sensibilidad":
            confidence_threshold = 0.50
        
        st.sidebar.info(f"Umbral actual: {confidence_threshold:.0%}")
        
        # Subir imagen
        uploaded_file = st.file_uploader(
            "Subir Imagen",
            type=['jpg', 'jpeg', 'png', 'bmp'],
            help="Sube una imagen para detectar puertas abiertas/cerradas"
        )
        
        if uploaded_file is not None:
            # Procesar imagen
            with st.spinner("Analizando imagen..."):
                annotated_image, detections = process_uploaded_image(
                    model, uploaded_file, confidence_threshold
                )
            
            # Mostrar resultados
            col1, col2 = st.columns(2)
            
            with col1:
                st.subheader("Imagen Original")
                original_image = Image.open(uploaded_file)
                st.image(original_image, caption="Imagen Original", use_column_width=True)
            
            with col2:
                st.subheader("Detecciones")
                st.image(annotated_image, caption="Imagen con Detecciones", use_column_width=True)
            
            # M√©tricas
            st.subheader("üìä M√©tricas de Detecci√≥n")
            display_metrics(detections)
            
            # Nota interpretativa
            if len(detections) > 1:
                # Verificar si hay detecciones superpuestas
                gate_open_count = sum(1 for d in detections if d['class_name'] == 'gate_open')
                if gate_open_count > 1:
                    st.info("""
                    üí° **Nota**: Se detectaron m√∫ltiples instancias de puertas abiertas. 
                    Esto puede indicar:
                    - Una puerta grande detectada desde diferentes √°ngulos
                    - M√∫ltiples puertas abiertas reales
                    
                    Verifique visualmente la imagen para confirmar el n√∫mero real de puertas.
                    """)
            
            # Alertas
            st.subheader("üö® Estado de Seguridad")
            display_alerts(detections)
            
            # Tabla de detecciones
            st.subheader("üìã Detalle de Detecciones")
            display_detections_table(detections)
            
            # JSON de detecciones (para debug)
            with st.expander("üîç Ver datos JSON"):
                st.json(detections)
    
    elif mode == "üìä Dashboard en Vivo":
        st.header("Monitoreo en Tiempo Real")
        st.info("‚ö†Ô∏è Funcionalidad en desarrollo. Use 'An√°lisis de Imagen' para probar el modelo.")
        
        # Placeholder para futura implementaci√≥n
        st.markdown("""
        ### Pr√≥ximas caracter√≠sticas:
        - üìπ Streaming desde c√°mara web
        - üé• Soporte para c√°maras IP
        - üìä M√©tricas en tiempo real
        - üö® Sistema de alertas autom√°ticas
        """)
    
    elif mode == "üìà Estad√≠sticas":
        st.header("Estad√≠sticas del Sistema")
        
        # Informaci√≥n del modelo
        st.subheader("üìä Informaci√≥n del Modelo")
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("Precisi√≥n (mAP@50)", "99.39%")
        with col2:
            st.metric("Velocidad", "30ms/imagen")
        with col3:
            st.metric("Tama√±o", "15MB")
        
        st.markdown("""
        ### üìà M√©tricas de Entrenamiento
        - **Dataset**: 1,464 im√°genes (1,172 train / 292 val)
        - **√âpocas**: 19 (early stopping)
        - **Tiempo de entrenamiento**: 44 minutos
        - **Hardware**: MacBook Pro M3
        """)
        
        # Gr√°fico de ejemplo
        st.subheader("Rendimiento del Modelo")
        epochs = list(range(1, 20))
        mAP50 = [0.5, 0.65, 0.75, 0.82, 0.87, 0.91, 0.93, 0.95, 0.96, 
                 0.97, 0.98, 0.985, 0.99, 0.992, 0.993, 0.994, 0.994, 0.994, 0.9939]
        
        fig = px.line(
            x=epochs,
            y=mAP50,
            title="Evoluci√≥n de mAP@50 durante el entrenamiento",
            labels={'x': '√âpoca', 'y': 'mAP@50'}
        )
        fig.add_hline(y=0.95, line_dash="dash", line_color="green", 
                      annotation_text="Objetivo: 95%")
        st.plotly_chart(fig, use_container_width=True)
    
    # Footer
    st.markdown("---")
    st.markdown("""
    <div style='text-align: center; color: #666;'>
        Sistema de Seguridad YOLO11 v1.0 | 
        Modelo de Puertas: 99.39% mAP@50 | 
        Entrenado el 26 de Mayo 2025
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()
