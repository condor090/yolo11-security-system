#!/usr/bin/env python3
"""
Alert Manager V2 Simplificado - Sistema de alertas con temporizador
Versi√≥n estable sin dependencias problem√°ticas
FILOSOF√çA: Puerta cerrada = Sistema seguro (limpia TODOS los timers)
"""

import json
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
from dataclasses import dataclass
from enum import Enum
from pathlib import Path
import threading
import time
import asyncio

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Importar servicio de audio
try:
    from backend.utils.audio_service import audio_service
    AUDIO_AVAILABLE = True
    logger.info("üîä Servicio de audio disponible")
except ImportError:
    AUDIO_AVAILABLE = False
    audio_service = None
    logger.warning("‚ö†Ô∏è Servicio de audio no disponible")


class AlertSeverity(Enum):
    """Niveles de severidad de alertas"""
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"


class AlertStatus(Enum):
    """Estados de una alerta"""
    PENDING = "pending"
    COUNTDOWN = "countdown"
    TRIGGERED = "triggered"
    SENT = "sent"
    FAILED = "failed"
    ACKNOWLEDGED = "acknowledged"
    CANCELLED = "cancelled"


@dataclass
class DoorTimer:
    """Temporizador para una puerta espec√≠fica"""
    door_id: str
    first_detected: datetime
    last_detected: datetime
    delay_seconds: int
    is_active: bool = True
    alarm_triggered: bool = False
    camera_id: str = "default"
    
    @property
    def time_elapsed(self) -> float:
        """Tiempo transcurrido desde la primera detecci√≥n"""
        return (datetime.now() - self.first_detected).total_seconds()
    
    @property
    def time_remaining(self) -> float:
        """Tiempo restante antes de activar alarma"""
        remaining = self.delay_seconds - self.time_elapsed
        return max(0, remaining)
    
    @property
    def should_trigger_alarm(self) -> bool:
        """Verificar si debe activar la alarma"""
        return self.is_active and self.time_elapsed >= self.delay_seconds and not self.alarm_triggered


class AlertManager:
    """Gestor principal de alertas con sistema de temporizador"""
    
    def __init__(self, config_path: Optional[str] = None):
        """Inicializar el gestor de alertas"""
        self.config_path = config_path
        self.config = self._load_config(config_path)
        self.door_timers: Dict[str, DoorTimer] = {}
        self.alert_history = []
        self.alarm_active = False
        
        # Iniciar monitor de temporizadores
        self._start_timer_monitor()
        
        logger.info("AlertManager V2 inicializado - Filosof√≠a: Puerta cerrada = Sistema seguro")
    
    def _load_config(self, config_path: Optional[str]) -> Dict:
        """Cargar configuraci√≥n desde archivo o usar valores por defecto"""
        default_config = {
            "timer_delays": {
                "default": 30,
                "entrance": 15,
                "loading": 300,
                "emergency": 5,
                "cam1": 30,
                "cam2": 60,
                "cam3": 120
            },
            "timer_units": "seconds",
            "sound_enabled": True,
            "visual_alerts": True,
            "clean_all_on_close": True  # NUEVO: Limpiar todo cuando se cierra cualquier puerta
        }
        
        if config_path and Path(config_path).exists():
            try:
                with open(config_path, 'r') as f:
                    user_config = json.load(f)
                    # Merge configs
                    for key, value in user_config.items():
                        if isinstance(value, dict) and key in default_config:
                            default_config[key].update(value)
                        else:
                            default_config[key] = value
            except Exception as e:
                logger.error(f"Error cargando configuraci√≥n: {e}")
        
        return default_config
    
    def _get_zone_name(self, door_id: str) -> str:
        """Obtener nombre amigable de la zona"""
        zone_names = {
            "door_1": "Entrada Principal",
            "door_2": "√Årea de Carga",
            "door_3": "Salida de Emergencia",
            "cam1_door_0": "C√°mara 1",
            "cam2_door_0": "C√°mara 2",
            "cam3_door_0": "C√°mara 3"
        }
        return zone_names.get(door_id, door_id)
    
    def _start_timer_monitor(self):
        """Iniciar thread monitor de temporizadores"""
        monitor_thread = threading.Thread(target=self._monitor_timers, daemon=True)
        monitor_thread.start()
        logger.info("Monitor de temporizadores iniciado")
    
    def _monitor_timers(self):
        """Thread que monitorea los temporizadores activos"""
        while True:
            try:
                current_time = datetime.now()
                
                # Lista para timers a eliminar
                timers_to_remove = []
                
                # Verificar cada temporizador
                for door_id, timer in list(self.door_timers.items()):
                    if not timer.is_active:
                        continue
                    
                    # Verificar si debe activar alarma
                    if timer.should_trigger_alarm:
                        logger.warning(f"‚è∞ ALARMA ACTIVADA - Puerta {door_id} abierta por {timer.time_elapsed:.0f} segundos")
                        timer.alarm_triggered = True
                        self.alarm_active = True
                        
                        # Activar alarma sonora si est√° disponible
                        if AUDIO_AVAILABLE and audio_service:
                            try:
                                zone_name = self._get_zone_name(door_id)
                                # Crear tarea as√≠ncrona en el loop principal
                                loop = asyncio.new_event_loop()
                                asyncio.set_event_loop(loop)
                                loop.run_until_complete(
                                    audio_service.start_alarm(
                                        zone_id=door_id, 
                                        zone_name=zone_name, 
                                        timer_seconds=timer.delay_seconds
                                    )
                                )
                                logger.info(f"üîä Alarma sonora activada para {zone_name}")
                            except Exception as e:
                                logger.error(f"Error activando alarma sonora: {e}")
                    
                    # Limpiar temporizadores muy antiguos (m√°s de 10 minutos)
                    if (current_time - timer.last_detected).total_seconds() > 600:
                        logger.info(f"üßπ Limpiando temporizador antiguo: {door_id} (m√°s de 10 minutos)")
                        timers_to_remove.append(door_id)
                
                # Eliminar timers marcados
                for door_id in timers_to_remove:
                    if door_id in self.door_timers:
                        del self.door_timers[door_id]
                
                # Actualizar estado global
                self.alarm_active = any(t.alarm_triggered for t in self.door_timers.values())
                
                time.sleep(0.5)
                
            except Exception as e:
                logger.error(f"Error en monitor: {e}")
                time.sleep(1)
    
    def get_timer_delay(self, door_id: str, camera_id: str = "default") -> int:
        """Obtener delay configurado para una puerta espec√≠fica"""
        delays = self.config['timer_delays']
        
        if camera_id in delays:
            delay = delays[camera_id]
        elif door_id in delays:
            delay = delays[door_id]
        else:
            delay = delays.get('default', 30)
        
        if self.config.get('timer_units') == 'minutes':
            delay = delay * 60
        
        return delay
    
    async def process_detection(self, detections: List[Dict], camera_id: str = "default", image: Optional[Any] = None):
        """Procesar nuevas detecciones con sistema de temporizador"""
        current_time = datetime.now()
        
        # Identificar puertas abiertas
        open_doors = [d for d in detections if d.get('class_name') == 'gate_open']
        
        # Identificar puertas cerradas
        closed_doors = [d for d in detections if d.get('class_name') == 'gate_closed']
        
        # FILOSOF√çA: Si detectamos CUALQUIER puerta cerrada, el sistema es seguro
        if closed_doors and self.config.get('clean_all_on_close', True):
            logger.info("üîí PUERTA CERRADA DETECTADA - Sistema seguro, limpiando TODAS las alarmas")
            
            # Limpiar TODOS los timers de TODAS las c√°maras
            if self.door_timers:
                logger.info(f"üßπ Limpiando {len(self.door_timers)} timers activos")
                for timer_id in list(self.door_timers.keys()):
                    timer = self.door_timers[timer_id]
                    if timer.alarm_triggered:
                        logger.info(f"üîï Alarma CANCELADA para {timer_id}")
                        # Detener alarma sonora
                        if AUDIO_AVAILABLE and audio_service:
                            try:
                                loop = asyncio.new_event_loop()
                                asyncio.set_event_loop(loop)
                                loop.run_until_complete(audio_service.stop_alarm(timer_id))
                            except:
                                pass
                    del self.door_timers[timer_id]
            
            # Resetear estado global
            self.alarm_active = False
            logger.info("‚úÖ Sistema limpio - No hay alarmas activas")
            
        else:
            # Procesar puertas cerradas individualmente (modo tradicional)
            for door_detection in closed_doors:
                door_id = door_detection.get('door_id', f"{camera_id}_door_0")
                
                # Buscar y cancelar timers relacionados
                timers_to_remove = []
                for timer_id, timer in self.door_timers.items():
                    if (timer.camera_id == camera_id or 
                        timer_id == door_id or
                        door_id in timer_id or
                        timer_id in door_id):
                        timers_to_remove.append(timer_id)
                
                # Eliminar timers encontrados
                for timer_id in timers_to_remove:
                    timer = self.door_timers[timer_id]
                    logger.info(f"‚úÖ Puerta {timer_id} CERRADA - Cancelando timer")
                    if timer.alarm_triggered:
                        logger.info(f"üîï Alarma cancelada para {timer_id}")
                    del self.door_timers[timer_id]
        
        # Procesar puertas abiertas (solo si no se limpi√≥ todo)
        for door_detection in open_doors:
            door_id = door_detection.get('door_id', f"{camera_id}_door_0")
            
            if door_id in self.door_timers:
                # Actualizar temporizador existente
                timer = self.door_timers[door_id]
                timer.last_detected = current_time
                logger.debug(f"Puerta {door_id} sigue abierta. Tiempo: {timer.time_elapsed:.1f}s / {timer.delay_seconds}s")
            else:
                # Crear nuevo temporizador
                delay = self.get_timer_delay(door_id, camera_id)
                timer = DoorTimer(
                    door_id=door_id,
                    first_detected=current_time,
                    last_detected=current_time,
                    delay_seconds=delay,
                    camera_id=camera_id
                )
                self.door_timers[door_id] = timer
                logger.info(f"üî¥ Nueva puerta abierta: {door_id}. Temporizador: {delay} segundos")
        
        # Limpiar timers hu√©rfanos (sin detecci√≥n reciente)
        current_door_ids = {d.get('door_id') for d in detections}
        timers_to_cleanup = []
        
        for door_id, timer in self.door_timers.items():
            # Si es de esta c√°mara y no est√° en las detecciones actuales
            if timer.camera_id == camera_id and door_id not in current_door_ids:
                time_since_last = (current_time - timer.last_detected).total_seconds()
                if time_since_last > 5:  # 5 segundos sin detecci√≥n
                    timers_to_cleanup.append(door_id)
        
        for door_id in timers_to_cleanup:
            logger.info(f"üßπ Limpiando timer sin detecci√≥n reciente: {door_id}")
            del self.door_timers[door_id]
        
        # Actualizar estado global de alarma
        self.alarm_active = any(t.alarm_triggered for t in self.door_timers.values())
    
    def get_timer_phase(self, elapsed_seconds: float) -> str:
        """Determinar la fase actual basada en el tiempo transcurrido"""
        # Usar la configuraci√≥n por defecto por ahora
        if elapsed_seconds < 30:
            return "friendly"
        elif elapsed_seconds < 120:
            return "moderate"
        else:
            return "critical"
    
    def get_audio_phase_name(self, elapsed_seconds: float, total_seconds: float) -> str:
        """Obtener nombre de fase de audio basado en porcentajes"""
        if total_seconds <= 0:
            return "friendly"
            
        percentage = (elapsed_seconds / total_seconds) * 100
        
        if percentage < 50:
            return "friendly"
        elif percentage < 90:
            return "moderate"
        else:
            return "critical"
    
    def get_active_timers(self) -> List[Dict]:
        """Obtener informaci√≥n de todos los temporizadores activos"""
        active_timers = []
        for door_id, timer in self.door_timers.items():
            if timer.is_active:
                elapsed = timer.time_elapsed
                
                # Usar l√≥gica basada en porcentajes del timer total
                phase = self.get_audio_phase_name(elapsed, timer.delay_seconds)
                
                active_timers.append({
                    'door_id': door_id,
                    'camera_id': timer.camera_id,
                    'time_elapsed': elapsed,
                    'time_remaining': timer.time_remaining,
                    'delay_seconds': timer.delay_seconds,
                    'alarm_triggered': timer.alarm_triggered,
                    'first_detected': timer.first_detected.isoformat(),
                    'progress_percent': min(100, (elapsed / timer.delay_seconds) * 100),
                    'current_phase': phase  # Fase basada en porcentaje del timer
                })
        return active_timers
    
    def stop_all_alarms(self):
        """Detener y ELIMINAR todas las alarmas activas"""
        logger.info("üõë STOP ALL - Eliminando TODOS los timers y alarmas")
        
        # Detener todas las alarmas sonoras
        if AUDIO_AVAILABLE and audio_service:
            try:
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                loop.run_until_complete(audio_service.stop_all_alarms())
            except:
                pass
        
        # Limpiar todo
        self.door_timers.clear()
        self.alarm_active = False
        
        logger.info("‚úÖ Sistema completamente limpio")
    
    def acknowledge_alarm(self, door_id: str):
        """Reconocer y ELIMINAR una alarma espec√≠fica"""
        if door_id in self.door_timers:
            logger.info(f"‚úÖ Reconociendo y eliminando timer: {door_id}")
            
            # Detener alarma sonora si est√° activa
            if AUDIO_AVAILABLE and audio_service:
                try:
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    loop.run_until_complete(audio_service.stop_alarm(door_id))
                except:
                    pass
            
            del self.door_timers[door_id]
            
            # Actualizar estado global
            self.alarm_active = any(t.alarm_triggered for t in self.door_timers.values())
            
            if not self.alarm_active:
                logger.info("‚úÖ No quedan alarmas activas")
    
    def get_alert_statistics(self, hours: int = 24) -> Dict:
        """Obtener estad√≠sticas b√°sicas"""
        return {
            'total_alerts': len(self.alert_history),
            'active_timers': len(self.get_active_timers()),
            'alarm_active': self.alarm_active,
            'average_confidence': 0.85  # Placeholder
        }
    
    def save_config(self, config_path: Optional[str] = None):
        """Guardar configuraci√≥n actual"""
        if not config_path:
            config_path = self.config_path or "alerts/alert_config_v2.json"
            
        Path(config_path).parent.mkdir(parents=True, exist_ok=True)
        with open(config_path, 'w') as f:
            json.dump(self.config, f, indent=2)
        logger.info(f"Configuraci√≥n guardada en {config_path}")
